import { t } from 'elysia';

export const PaymentIntent = t.Object({
	id: t.String(),
	object: t.Literal('payment_intent'),
	amount: t.Number(),
	amount_capturable: t.Number(),
	amount_details: t.Object({
		tip: t.Record(t.String(), t.Any()),
	}),
	amount_received: t.Number(),
	application: t.Union([t.String(), t.Null()]),
	application_fee_amount: t.Union([t.Number(), t.Null()]),
	automatic_payment_methods: t.Object({
		enabled: t.Boolean(),
	}),
	canceled_at: t.Union([t.Number(), t.Null()]),
	cancellation_reason: t.Union([t.String(), t.Null()]),
	capture_method: t.Union([t.Literal('automatic'), t.Literal('manual')]),
	client_secret: t.String(),
	confirmation_method: t.Union([t.Literal('automatic'), t.Literal('manual')]),
	created: t.Number(),
	currency: t.String(),
	customer: t.Union([t.String(), t.Null()]),
	description: t.Union([t.String(), t.Null()]),
	last_payment_error: t.Union([t.Any(), t.Null()]),
	latest_charge: t.Union([t.String(), t.Null()]),
	livemode: t.Boolean(),
	metadata: t.Record(t.String(), t.String()),
	next_action: t.Union([t.Any(), t.Null()]),
	on_behalf_of: t.Union([t.String(), t.Null()]),
	payment_method: t.Union([t.String(), t.Null()]),
	payment_method_options: t.Object({
		card: t.Object({
			installments: t.Union([t.Any(), t.Null()]),
			mandate_options: t.Union([t.Any(), t.Null()]),
			network: t.Union([t.String(), t.Null()]),
			request_three_d_secure: t.Union([
				t.Literal('automatic'),
				t.Literal('any'),
				t.Literal('challenge'),
			]),
		}),
		link: t.Object({
			persistent_token: t.Union([t.String(), t.Null()]),
		}),
	}),
	payment_method_types: t.Array(t.String()),
	processing: t.Union([t.Any(), t.Null()]),
	receipt_email: t.Union([t.String(), t.Null()]),
	review: t.Union([t.String(), t.Null()]),
	setup_future_usage: t.Union([
		t.Literal('on_session'),
		t.Literal('off_session'),
		t.Null(),
	]),
	shipping: t.Union([t.Any(), t.Null()]),
	source: t.Union([t.String(), t.Null()]),
	statement_descriptor: t.Union([t.String(), t.Null()]),
	statement_descriptor_suffix: t.Union([t.String(), t.Null()]),
	status: t.Union([
		t.Literal('requires_payment_method'),
		t.Literal('requires_confirmation'),
		t.Literal('requires_action'),
		t.Literal('processing'),
		t.Literal('requires_capture'),
		t.Literal('canceled'),
		t.Literal('succeeded'),
	]),
	transfer_data: t.Union([t.Any(), t.Null()]),
	transfer_group: t.Union([t.String(), t.Null()]),
});

export type PaymentIntentType = typeof PaymentIntent.static;

export const Refund = t.Object({
	id: t.String(),
	object: t.Literal('refund'),
	amount: t.Number(),
	balance_transaction: t.String(),
	charge: t.String(),
	created: t.Number(),
	currency: t.String(),
	destination_details: t.Object({
		card: t.Object({
			reference: t.String(),
			reference_status: t.Union([
				t.Literal('available'),
				t.Literal('unavailable'),
				t.Literal('pending'),
			]),
			reference_type: t.Union([
				t.Literal('acquirer_reference_number'),
				t.Literal('merchant_reference'),
			]),
			type: t.Literal('refund'),
		}),
		type: t.Literal('card'),
	}),
	metadata: t.Record(t.String(), t.String()),
	payment_intent: t.String(),
	reason: t.Union([
		t.Literal('duplicate'),
		t.Literal('fraudulent'),
		t.Literal('requested_by_customer'),
		t.Null(),
	]),
	receipt_number: t.Union([t.String(), t.Null()]),
	source_transfer_reversal: t.Union([t.String(), t.Null()]),
	status: t.Union([
		t.Literal('pending'),
		t.Literal('succeeded'),
		t.Literal('failed'),
		t.Literal('canceled'),
	]),
	transfer_reversal: t.Union([t.String(), t.Null()]),
});

export type RefundType = typeof Refund.static;

export const Customer = t.Object({
	id: t.String(),
	object: t.Literal('customer'),
	address: t.Union([t.Any(), t.Null()]),
	balance: t.Number(),
	created: t.Number(),
	currency: t.Union([t.String(), t.Null()]),
	default_source: t.Union([t.String(), t.Null()]),
	delinquent: t.Boolean(),
	description: t.Union([t.String(), t.Null()]),
	email: t.Union([t.String(), t.Null()]),
	invoice_prefix: t.String(),
	invoice_settings: t.Object({
		custom_fields: t.Union([t.Any(), t.Null()]),
		default_payment_method: t.Union([t.String(), t.Null()]),
		footer: t.Union([t.String(), t.Null()]),
		rendering_options: t.Union([t.Any(), t.Null()]),
	}),
	livemode: t.Boolean(),
	metadata: t.Record(t.String(), t.String()),
	name: t.Union([t.String(), t.Null()]),
	next_invoice_sequence: t.Number(),
	phone: t.Union([t.String(), t.Null()]),
	preferred_locales: t.Array(t.String()),
	shipping: t.Union([t.Any(), t.Null()]),
	tax_exempt: t.Union([
		t.Literal('none'),
		t.Literal('exempt'),
		t.Literal('reverse'),
	]),
	test_clock: t.Union([t.String(), t.Null()]),
});

export type CustomerType = typeof Customer.static;

export const Charge = t.Object({
	id: t.String(),
	object: t.Literal('charge'),
	amount: t.Number(),
	amount_captured: t.Number(),
	amount_refunded: t.Number(),
	application: t.Union([t.String(), t.Null()]),
	application_fee: t.Union([t.String(), t.Null()]),
	application_fee_amount: t.Union([t.Number(), t.Null()]),
	balance_transaction: t.String(),
	billing_details: t.Object({
		address: t.Object({
			city: t.Union([t.String(), t.Null()]),
			country: t.Union([t.String(), t.Null()]),
			line1: t.Union([t.String(), t.Null()]),
			line2: t.Union([t.String(), t.Null()]),
			postal_code: t.Union([t.String(), t.Null()]),
			state: t.Union([t.String(), t.Null()]),
		}),
		email: t.Union([t.String(), t.Null()]),
		name: t.Union([t.String(), t.Null()]),
		phone: t.Union([t.String(), t.Null()]),
	}),
	calculated_statement_descriptor: t.String(),
	captured: t.Boolean(),
	created: t.Number(),
	currency: t.String(),
	customer: t.Union([t.String(), t.Null()]),
	description: t.Union([t.String(), t.Null()]),
	disputed: t.Boolean(),
	failure_balance_transaction: t.Union([t.String(), t.Null()]),
	failure_code: t.Union([t.String(), t.Null()]),
	failure_message: t.Union([t.String(), t.Null()]),
	fraud_details: t.Record(t.String(), t.Any()),
	livemode: t.Boolean(),
	metadata: t.Record(t.String(), t.String()),
	on_behalf_of: t.Union([t.String(), t.Null()]),
	outcome: t.Object({
		network_status: t.Union([
			t.Literal('approved_by_network'),
			t.Literal('declined_by_network'),
			t.Literal('not_sent_to_network'),
			t.Literal('reversed_after_approval'),
		]),
		reason: t.Union([t.String(), t.Null()]),
		risk_level: t.Union([
			t.Literal('normal'),
			t.Literal('elevated'),
			t.Literal('highest'),
			t.Literal('not_assessed'),
			t.Literal('unknown'),
		]),
		risk_score: t.Number(),
		seller_message: t.String(),
		type: t.Union([
			t.Literal('authorized'),
			t.Literal('manual_review'),
			t.Literal('issuer_declined'),
			t.Literal('blocked'),
			t.Literal('invalid'),
		]),
	}),
	paid: t.Boolean(),
	payment_intent: t.Union([t.String(), t.Null()]),
	payment_method: t.String(),
	payment_method_details: t.Object({
		card: t.Object({
			brand: t.Union([
				t.Literal('visa'),
				t.Literal('mastercard'),
				t.Literal('amex'),
				t.Literal('discover'),
				t.Literal('diners'),
				t.Literal('jcb'),
				t.Literal('unionpay'),
				t.Literal('unknown'),
			]),
			checks: t.Object({
				address_line1_check: t.Union([
					t.Literal('pass'),
					t.Literal('fail'),
					t.Literal('unavailable'),
					t.Literal('unchecked'),
					t.Null(),
				]),
				address_postal_code_check: t.Union([
					t.Literal('pass'),
					t.Literal('fail'),
					t.Literal('unavailable'),
					t.Literal('unchecked'),
					t.Null(),
				]),
				cvc_check: t.Union([
					t.Literal('pass'),
					t.Literal('fail'),
					t.Literal('unavailable'),
					t.Literal('unchecked'),
					t.Null(),
				]),
			}),
			country: t.String(),
			exp_month: t.Number(),
			exp_year: t.Number(),
			fingerprint: t.String(),
			funding: t.Union([
				t.Literal('credit'),
				t.Literal('debit'),
				t.Literal('prepaid'),
				t.Literal('unknown'),
			]),
			installments: t.Union([t.Any(), t.Null()]),
			last4: t.String(),
			mandate: t.Union([t.String(), t.Null()]),
			network: t.Union([
				t.Literal('visa'),
				t.Literal('mastercard'),
				t.Literal('amex'),
				t.Literal('discover'),
				t.Literal('diners'),
				t.Literal('jcb'),
				t.Literal('unionpay'),
				t.Literal('unknown'),
			]),
			three_d_secure: t.Union([t.Any(), t.Null()]),
			wallet: t.Union([t.Any(), t.Null()]),
		}),
		type: t.Literal('card'),
	}),
	receipt_email: t.Union([t.String(), t.Null()]),
	receipt_number: t.Union([t.String(), t.Null()]),
	receipt_url: t.String(),
	refunded: t.Boolean(),
	review: t.Union([t.String(), t.Null()]),
	shipping: t.Union([t.Any(), t.Null()]),
	source_transfer: t.Union([t.String(), t.Null()]),
	statement_descriptor: t.Union([t.String(), t.Null()]),
	statement_descriptor_suffix: t.Union([t.String(), t.Null()]),
	status: t.Union([
		t.Literal('succeeded'),
		t.Literal('pending'),
		t.Literal('failed'),
	]),
	transfer_data: t.Union([t.Any(), t.Null()]),
	transfer_group: t.Union([t.String(), t.Null()]),
});

export type ChargeType = typeof Charge.static;
