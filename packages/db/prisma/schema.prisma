generator client {
  provider      = "prisma-client-js"
  output        = "../generated/client"
  binaryTargets = ["native", "windows-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Email {
  id        String   @id @default(uuid())
  ipAddress String?
  email     String
  createdAt DateTime @default(now())
}

model Contact {
  id              String    @id @default(uuid())
  name            String
  email           String
  phone           String?
  company         String?
  website         String?
  monthlyVisitors Int?
  message         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  repliedAt       DateTime?
  status          String    @default("new") // new, replied, spam

  @@map("contacts")
}

// Authentication models

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  firstName     String?
  lastName      String?
  image         String?
  emailVerified Boolean         @default(false)
  name          String? // Computed field for display purposes
  password      String?
  status        UserStatus      @default(ACTIVE)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  deletedAt     DateTime?
  // Relations
  subscriptions Subscription[]  @relation(name: "subscriptionCreatedBy")
  projectAccess ProjectAccess[]
  posts         Post[]
  role          Role            @default(USER)
  websites      Website[] // This will be for personal websites, org websites go through projects
  // Authentication relations - preserved as requested
  sessions      Session[]
  accounts      Account[]
  auditLogs     AuditLog[]      @relation("actionByUser")

  twoFactorEnabled Boolean?
  twofactors       TwoFactor[]

  // User preferences relation
  preferences UserPreference?
  
  // Domain verification relation
  domains     Domain[]

  @@map("user")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique // Ensure token is unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum Role {
  ADMIN
  OWNER
  EDITOR
  AUTHOR
  VIEWER
  USER
}

enum OrganizationRole {
  ADMIN
  OWNER
  MEMBER
  VIEWER
}

// New enum for project status standardization

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

// New enum for subscription status

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  PAUSED
  INCOMPLETE
}

// Blog models

model Post {
  id          String    @id @default(uuid())
  title       String
  slug        String    @unique
  content     String
  excerpt     String?
  published   Boolean   @default(false)
  authorId    String
  coverImage  String?
  author      User      @relation(fields: [authorId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  publishedAt DateTime?
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  tags        Tag[]
  deletedAt   DateTime?

  @@index([authorId])
  @@map("posts")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  slug      String    @unique
  posts     Post[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@map("categories")
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  slug      String    @unique
  posts     Post[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@map("tags")
}

// Website models for dashboard

enum VerificationStatus {
  PENDING
  VERIFIED
  FAILED
}

model Website {
  id     String        @id @default(uuid())
  domain String        @unique
  name   String?
  status WebsiteStatus @default(ACTIVE)
  
  // Reference to the verified domain
  domainId String?
  verifiedDomain Domain? @relation(fields: [domainId], references: [id])
  
  // User-owned website
  userId             String?
  user               User?              @relation(fields: [userId], references: [id])
  // Project-owned website (represents connection to organizations)
  projectId          String?            @unique // One project can have one website
  project            Project?           @relation(fields: [projectId], references: [id])
  // Timestamps & soft delete
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
  deletedAt          DateTime?

  @@index([userId])
  @@index([domainId])
  @@map("websites")
}

// New Domain model for verified top-level domains
model Domain {
  id                String             @id @default(uuid())
  name              String             @unique // The top-level domain (e.g., example.com)
  verificationStatus VerificationStatus @default(PENDING)
  verificationToken  String?            @unique @default(uuid())
  verifiedAt         DateTime?
  
  // Domain can be owned by either a user or a project
  userId            String?
  user              User?              @relation(fields: [userId], references: [id])
  projectId         String?
  project           Project?           @relation(fields: [projectId], references: [id])
  
  // DNS records for verification
  dnsRecords        Json?              // Store DNS records for verification
  // Timestamps
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  deletedAt         DateTime?
  // Relation to websites using this domain (including subdomains)
  websites          Website[]

  @@index([userId])
  @@index([projectId])
  @@map("domains")
}

enum WebsiteStatus {
  ACTIVE
  HEALTHY
  UNHEALTHY
  INACTIVE
  PENDING
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

enum ProjectType {
  WEBSITE
  MOBILE_APP
  DESKTOP_APP
  API
}

// New Subscription model extracted from Organization

model Subscription {
  id                          String             @id @default(uuid())
  organizationId              String             @unique
  // organization                Organization       @relation(fields: [organizationId], references: [id])
  // Payment provider details
  customerId                  String?
  priceId                     String?
  productId                   String?
  status                      SubscriptionStatus @default(ACTIVE)
  // Dates
  startsAt                    DateTime?
  endsAt                      DateTime?
  canceledAt                  DateTime?
  // Usage limits
  periodEventsCount           Int                @default(0)
  periodEventsCountExceededAt DateTime?
  periodEventsLimit           Int                @default(0)
  interval                    String? // monthly, yearly, etc.
  // Creation tracking
  createdByUserId             String?
  createdBy                   User?              @relation(name: "subscriptionCreatedBy", fields: [createdByUserId], references: [id])
  // Timestamps
  createdAt                   DateTime           @default(now())
  updatedAt                   DateTime           @default(now()) @updatedAt

  @@map("subscriptions")
}


enum ClientType {
  INDIVIDUAL
  COMPANY
  NONPROFIT
}

model ProjectAccess {
  id        String    @id @default(uuid())
  projectId String
  project   Project   @relation(fields: [projectId], references: [id])
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  role      Role      @default(VIEWER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@unique([projectId, userId])
  @@map("project_access")
}

model Project {
  id             String          @id @default(uuid())
  name           String
  slug           String
  description    String?
  type           ProjectType     @default(WEBSITE)
  clientId       String?
  client         Client?         @relation(fields: [clientId], references: [id])
  startDate      DateTime?
  endDate        DateTime?
  status         ProjectStatus   @default(ACTIVE)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  deletedAt      DateTime?
  // Relations
  access         ProjectAccess[]
  events         EventMeta[]
  website        Website? // New: A project of type WEBSITE can have an associated website
  domains        Domain[] // Domains owned by this project

  @@map("projects")
}

model EventMeta {
  id          String   @id @default(uuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  name        String
  description String?
  data        Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@index([projectId])
  @@map("event_meta")
}

model Client {
  id             String       @id @default(uuid())
  name           String
  email          String?
  phone          String?
  type           ClientType   @default(COMPANY)
  projects       Project[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  deletedAt      DateTime?

  @@map("clients")
}

// New model for audit trail

model AuditLog {
  id           String   @id @default(uuid())
  action       String
  resourceType String
  resourceId   String
  details      Json?
  ipAddress    String?
  userAgent    String?
  // User who performed the action
  userId       String?
  user         User?    @relation("actionByUser", fields: [userId], references: [id])
  // Timestamps
  createdAt    DateTime @default(now())

  @@index([userId])
  @@index([resourceType, resourceId])
  @@map("audit_logs")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model UserPreference {
  id         String   @id @default(uuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  timezone   String   @default("auto") // "auto" will use browser timezone, or specify an IANA timezone
  dateFormat String   @default("MMM D, YYYY") // Default date format
  timeFormat String   @default("h:mm a") // Default time format 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("user_preferences")
}