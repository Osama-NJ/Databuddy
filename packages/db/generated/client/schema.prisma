generator client {
  provider      = "prisma-client-js"
  output        = "../generated/client"
  binaryTargets = ["rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Email {
  id        String   @id @default(uuid())
  ipAddress String?
  email     String
  createdAt DateTime @default(now())
}

model Contact {
  id              String    @id @default(uuid())
  name            String
  email           String
  phone           String?
  company         String?
  website         String?
  monthlyVisitors Int?
  message         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  repliedAt       DateTime?
  status          String    @default("new") // new, replied, spam

  @@map("contacts")
}

// Authentication models

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  firstName     String?
  lastName      String?
  image         String?
  emailVerified DateTime?
  name          String? // Computed field for display purposes
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  deletedAt     DateTime?

  // Relations
  organizations Organization[]  @relation("organizationCreatedBy")
  subscriptions Organization[]  @relation(name: "subscriptionCreatedBy")
  memberships   Member[]
  invitesSent   Member[]        @relation("invitedBy")
  projectAccess ProjectAccess[]
  posts         Post[]
  role          Role            @default(USER)
  websites      Website[]

  // Authentication relations - preserved as requested
  sessions Session[]
  accounts Account[]
  invites  Invite[]

  @@map("user")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum Role {
  ADMIN
  USER
  AUTHOR
  EDITOR
  VIEWER
  OWNER
}

// Blog models

model Post {
  id          String    @id @default(uuid())
  title       String
  slug        String    @unique
  content     String
  excerpt     String?
  published   Boolean   @default(false)
  authorId    String
  coverImage  String?
  author      User      @relation(fields: [authorId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  publishedAt DateTime?
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  tags        Tag[]

  @@index([authorId])
  @@index([categoryId])
  @@map("posts")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("categories")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("tags")
}

model CompanyInfo {
  id          String   @id @default(uuid())
  name        String
  description String?
  logo        String?
  website     String?
  email       String?
  phone       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@map("company_info")
}

// Careers page models

model JobListing {
  id           String           @id @default(uuid())
  title        String
  description  String
  requirements String?
  location     String?
  salary       String?
  type         String? // full-time, part-time, contract
  published    Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now()) @updatedAt
  publishedAt  DateTime?
  closedAt     DateTime?
  applications JobApplication[]

  @@map("job_listings")
}

model JobApplication {
  id           String            @id @default(uuid())
  jobListingId String
  jobListing   JobListing        @relation(fields: [jobListingId], references: [id])
  name         String
  email        String
  phone        String?
  resume       String?
  coverLetter  String?
  status       ApplicationStatus @default(NEW)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now()) @updatedAt
  reviewedAt   DateTime?

  @@index([jobListingId])
  @@map("job_applications")
}

enum ApplicationStatus {
  NEW
  REVIEWED
  INTERVIEWING
  REJECTED
  HIRED
}

// Website models for dashboard

model Website {
  id        String        @id @default(uuid())
  domain    String        @unique
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  status    WebsiteStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt

  @@index([userId])
  @@map("website")
}

enum WebsiteStatus {
  ACTIVE
  HEALTHY
  UNHEALTHY
  INACTIVE
  PENDING
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

enum ProjectType {
  WEBSITE
  MOBILE_APP
  DESKTOP_APP
  API
}

model Organization {
  id              String          @id @default(uuid())
  name            String
  projects        Project[]
  members         Member[]
  createdByUserId String?
  createdBy       User?           @relation(name: "organizationCreatedBy", fields: [createdByUserId], references: [id])
  ProjectAccess   ProjectAccess[]
  Client          Client[]
  // Dashboard       Dashboard[]
  // ShareOverview   ShareOverview[]
  // integrations    Integration[]
  invites         Invite[]

  // Subscription
  subscriptionId                          String?
  subscriptionCustomerId                  String?
  subscriptionPriceId                     String?
  subscriptionProductId                   String?
  /// [IPrismaSubscriptionStatus]
  subscriptionStatus                      String?
  subscriptionStartsAt                    DateTime?
  subscriptionEndsAt                      DateTime?
  subscriptionCanceledAt                  DateTime?
  subscriptionCreatedByUserId             String?
  subscriptionCreatedBy                   User?     @relation(name: "subscriptionCreatedBy", fields: [subscriptionCreatedByUserId], references: [id])
  subscriptionPeriodEventsCount           Int       @default(0)
  subscriptionPeriodEventsCountExceededAt DateTime?
  subscriptionPeriodEventsLimit           Int       @default(0)
  subscriptionInterval                    String?

  // When deleteAt > now(), the organization will be deleted
  deleteAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("organizations")
}

model Member {
  id             String       @id @default(uuid()) @db.Uuid
  role           String
  email          String
  // userId is nullable because we want to allow invites to be sent to emails that are not registered
  userId         String?
  user           User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  invitedById    String?
  invitedBy      User?        @relation("invitedBy", fields: [invitedById], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  meta           Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
  @@index([invitedById])
  @@map("members")
}

enum ClientType {
  INDIVIDUAL
  COMPANY
  NONPROFIT
}

enum AccessLevel {
  ADMIN
  EDITOR
  VIEWER
}

model ProjectAccess {
  id           String         @id @default(uuid())
  projectId    String
  project      Project        @relation(fields: [projectId], references: [id])
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  level        AccessLevel    @default(VIEWER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  Organization Organization[]

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map("project_access")
}

model Invite {
  id             String        @id @default(uuid())
  email          String
  organizationId String
  role           Role          @default(VIEWER)
  token          String        @unique
  expires        DateTime
  createdById    String
  createdBy      User          @relation(fields: [createdById], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  acceptedAt     DateTime?
  Organization   Organization? @relation(fields: [organizationId], references: [id])

  @@index([createdById])
  @@map("invites")
}

model Project {
  id             String       @id @default(uuid())
  name           String
  slug           String
  description    String?
  type           ProjectType  @default(WEBSITE)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  clientId       String?
  client         Client?      @relation(fields: [clientId], references: [id])
  startDate      DateTime?
  endDate        DateTime?
  status         String       @default("active") // active, completed, on-hold, cancelled
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  deletedAt      DateTime?

  // Relations
  access ProjectAccess[]
  events EventMeta[]

  @@unique([organizationId, slug])
  @@index([organizationId])
  @@index([clientId])
  @@map("projects")
}

model EventMeta {
  id          String   @id @default(uuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  name        String
  description String?
  data        Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@index([projectId])
  @@map("event_meta")
}

model Client {
  id             String       @id @default(uuid())
  name           String
  email          String?
  phone          String?
  type           ClientType   @default(COMPANY)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  projects       Project[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt

  @@index([organizationId])
  @@map("clients")
}
